// <auto-generated />
using System;
using BlogPost.dbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlogPost.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BlogPost.Model.Comment", b =>
                {
                    b.Property<int>("commentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("commentId"), 1L, 1);

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("postId")
                        .HasColumnType("int");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("commentId");

                    b.HasIndex("postId");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("BlogPost.Model.Post", b =>
                {
                    b.Property<int>("postId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("postId"), 1L, 1);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("urlImages")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("postId");

                    b.ToTable("blogPosts");
                });

            modelBuilder.Entity("BlogPost.Model.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userId"), 1L, 1);

                    b.Property<int?>("blogPostspostId")
                        .HasColumnType("int");

                    b.Property<int?>("commentscommentId")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.HasIndex("blogPostspostId");

                    b.HasIndex("commentscommentId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("BlogPost.Model.Comment", b =>
                {
                    b.HasOne("BlogPost.Model.Post", null)
                        .WithMany("comments")
                        .HasForeignKey("postId");
                });

            modelBuilder.Entity("BlogPost.Model.User", b =>
                {
                    b.HasOne("BlogPost.Model.Post", "blogPosts")
                        .WithMany("Author")
                        .HasForeignKey("blogPostspostId");

                    b.HasOne("BlogPost.Model.Comment", "comments")
                        .WithMany("author")
                        .HasForeignKey("commentscommentId");

                    b.Navigation("blogPosts");

                    b.Navigation("comments");
                });

            modelBuilder.Entity("BlogPost.Model.Comment", b =>
                {
                    b.Navigation("author");
                });

            modelBuilder.Entity("BlogPost.Model.Post", b =>
                {
                    b.Navigation("Author");

                    b.Navigation("comments");
                });
#pragma warning restore 612, 618
        }
    }
}
